import { useState } from 'react'
import { useNavigate } from 'react-router-dom'

const Support = () => {
    const navigate = useNavigate()
    const [searchQuery, setSearchQuery] = useState('')
    const [selectedCategory, setSelectedCategory] = useState('all')
    const [openFaqId, setOpenFaqId] = useState(null)
    const [contactForm, setContactForm] = useState({
        name: '',
        email: '',
        phone: '',
        subject: '',
        message: ''
    })

    // FAQ Categories
    const faqCategories = [
        { id: 'all', name: 'T·∫•t c·∫£', emoji: 'üìã' },
        { id: 'order', name: 'ƒê∆°n h√†ng', emoji: 'üì¶' },
        { id: 'shipping', name: 'V·∫≠n chuy·ªÉn', emoji: 'üöö' },
        { id: 'payment', name: 'Thanh to√°n', emoji: 'üí≥' },
        { id: 'product', name: 'S·∫£n ph·∫©m', emoji: 'üçé' },
        { id: 'account', name: 'T√†i kho·∫£n', emoji: 'üë§' }
    ]

    // FAQs Data
    const faqs = [
        {
            id: 1,
            category: 'order',
            question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t h√†ng?',
            answer: 'ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n ch·ªâ c·∫ßn: 1) Ch·ªçn s·∫£n ph·∫©m v√† th√™m v√†o gi·ªè h√†ng, 2) V√†o gi·ªè h√†ng v√† nh·∫•n "Thanh to√°n", 3) ƒêi·ªÅn th√¥ng tin giao h√†ng, 4) Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† ho√†n t·∫•t ƒë∆°n h√†ng. ƒê∆°n gi·∫£n v·∫≠y th√¥i!'
        },
        {
            id: 2,
            category: 'order',
            question: 'T√¥i c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng kh√¥ng?',
            answer: 'B·∫°n c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng mi·ªÖn ph√≠ trong v√≤ng 30 ph√∫t sau khi ƒë·∫∑t. Sau th·ªùi gian n√†y, vui l√≤ng li√™n h·ªá hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.'
        },
        {
            id: 3,
            category: 'order',
            question: 'L√†m sao ƒë·ªÉ theo d√µi ƒë∆°n h√†ng c·ªßa t√¥i?',
            answer: 'V√†o m·ª•c "ƒê∆°n h√†ng c·ªßa t√¥i" trong t√†i kho·∫£n, b·∫°n s·∫Ω th·∫•y tr·∫°ng th√°i v√† v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ƒë∆°n h√†ng. Ch√∫ng t√¥i c≈©ng g·ª≠i th√¥ng b√°o qua email v√† SMS.'
        },
        {
            id: 4,
            category: 'shipping',
            question: 'Th·ªùi gian giao h√†ng l√† bao l√¢u?',
            answer: 'ƒê∆°n h√†ng th∆∞·ªùng ƒë∆∞·ª£c giao trong v√≤ng 2-4 gi·ªù t·∫°i n·ªôi th√†nh v√† 1-2 ng√†y cho c√°c khu v·ª±c kh√°c. ƒê∆°n h√†ng g·∫•p c√≥ th·ªÉ giao trong 1 gi·ªù v·ªõi ph√≠ express.'
        },
        {
            id: 5,
            category: 'shipping',
            question: 'Ph√≠ v·∫≠n chuy·ªÉn l√† bao nhi√™u?',
            answer: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 150.000 ‚Ç´. ƒê∆°n h√†ng d∆∞·ªõi 150.000 ‚Ç´ ch·ªâ m·∫•t 15.000 ‚Ç´ ph√≠ ship. √Åp d·ª•ng to√†n qu·ªëc!'
        },
        {
            id: 6,
            category: 'shipping',
            question: 'T√¥i c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng kh√¥ng?',
            answer: 'B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng tr∆∞·ªõc khi ƒë∆°n ƒë∆∞·ª£c x√°c nh·∫≠n (trong v√≤ng 15 ph√∫t). Sau ƒë√≥ vui l√≤ng li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.'
        },
        {
            id: 7,
            category: 'payment',
            question: 'C√°c ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?',
            answer: 'Ch√∫ng t√¥i ch·∫•p nh·∫≠n: Ti·ªÅn m·∫∑t (COD), Th·∫ª ATM/Visa/Mastercard, V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay, VNPay), Chuy·ªÉn kho·∫£n ng√¢n h√†ng.'
        },
        {
            id: 8,
            category: 'payment',
            question: 'Thanh to√°n online c√≥ an to√†n kh√¥ng?',
            answer: 'Ho√†n to√†n an to√†n! Ch√∫ng t√¥i s·ª≠ d·ª•ng m√£ h√≥a SSL 256-bit v√† tu√¢n th·ªß chu·∫©n PCI-DSS. Th√¥ng tin thanh to√°n c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi.'
        },
        {
            id: 9,
            category: 'product',
            question: 'S·∫£n ph·∫©m c√≥ t∆∞∆°i ngon kh√¥ng?',
            answer: 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c nh·∫≠p kh·∫©u tr·ª±c ti·∫øp t·ª´ v∆∞·ªùn v√† ki·ªÉm tra k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi giao. Ch√∫ng t√¥i cam k·∫øt 100% t∆∞∆°i ngon ho·∫∑c ho√†n ti·ªÅn!'
        },
        {
            id: 10,
            category: 'product',
            question: 'T√¥i c√≥ th·ªÉ ƒë·ªïi tr·∫£ s·∫£n ph·∫©m kh√¥ng?',
            answer: 'B·∫°n c√≥ th·ªÉ ƒë·ªïi/tr·∫£ s·∫£n ph·∫©m trong v√≤ng 24 gi·ªù n·∫øu kh√¥ng h√†i l√≤ng. Ch·ªâ c·∫ßn li√™n h·ªá hotline v√† ch√∫ng t√¥i s·∫Ω ƒë·∫øn l·∫•y h√†ng mi·ªÖn ph√≠.'
        },
        {
            id: 11,
            category: 'account',
            question: 'L√†m sao ƒë·ªÉ t·∫°o t√†i kho·∫£n?',
            answer: 'Nh·∫•n v√†o "ƒêƒÉng k√Ω" tr√™n thanh menu, ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i/email v√† m·∫≠t kh·∫©u. X√°c nh·∫≠n qua OTP v√† b·∫°n ƒë√£ c√≥ t√†i kho·∫£n ngay!'
        },
        {
            id: 12,
            category: 'account',
            question: 'T√¥i qu√™n m·∫≠t kh·∫©u th√¨ l√†m sao?',
            answer: 'Nh·∫•n "Qu√™n m·∫≠t kh·∫©u" tr√™n trang ƒëƒÉng nh·∫≠p, nh·∫≠p email/SƒêT ƒë√£ ƒëƒÉng k√Ω. Ch√∫ng t√¥i s·∫Ω g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho b·∫°n.'
        }
    ]

    // Contact methods
    const contactMethods = [
        {
            title: 'Hotline',
            content: '1900-xxxx',
            description: 'H·ªó tr·ª£ 24/7',
            bgColor: 'bg-gradient-to-br from-green-50 to-emerald-50',
            textColor: 'text-green-700',
            emoji: 'üìû'
        },
        {
            title: 'Email',
            content: 'support@fruithub.vn',
            description: 'Ph·∫£n h·ªìi trong 2h',
            bgColor: 'bg-gradient-to-br from-blue-50 to-cyan-50',
            textColor: 'text-blue-700',
            emoji: '‚úâÔ∏è'
        },
        {
            title: 'Zalo',
            content: '0123-456-789',
            description: 'Chat tr·ª±c ti·∫øp',
            bgColor: 'bg-gradient-to-br from-purple-50 to-pink-50',
            textColor: 'text-purple-700',
            emoji: 'üí¨'
        },
        {
            title: 'Facebook',
            content: 'fb.com/fruithub',
            description: 'Messenger 24/7',
            bgColor: 'bg-gradient-to-br from-indigo-50 to-blue-50',
            textColor: 'text-indigo-700',
            emoji: 'üì±'
        }
    ]

    // Quick actions
    const quickActions = [
        { title: 'Theo d√µi ƒë∆°n h√†ng', emoji: 'üîç', link: '/orders' },
        { title: 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£', emoji: 'üîÑ', link: '/returns' },
        { title: 'H∆∞·ªõng d·∫´n thanh to√°n', emoji: 'üí∞', link: '/payment-guide' },
        { title: 'Khuy·∫øn m√£i', emoji: 'üéÅ', link: '/promotions' }
    ]

    const filteredFaqs = faqs.filter(faq => {
        const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory
        const matchesSearch = faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
                            faq.answer.toLowerCase().includes(searchQuery.toLowerCase())
        return matchesCategory && matchesSearch
    })

    const handleSubmitContact = (e) => {
        e.preventDefault()
        alert('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 2 gi·ªù.')
        setContactForm({ name: '', email: '', phone: '', subject: '', message: '' })
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-green-50/30">
            {/* Hero Section */}
            <div className="relative bg-gradient-to-r from-green-600 to-emerald-600 text-white overflow-hidden">
                {/* Background Pattern */}
                <div className="absolute inset-0 opacity-10">
                    <div className="absolute top-0 right-0 w-96 h-96 bg-white rounded-full blur-3xl"></div>
                    <div className="absolute bottom-0 left-0 w-96 h-96 bg-white rounded-full blur-3xl"></div>
                </div>

                <div className="relative max-w-7xl mx-auto px-4 py-16 text-center">
                    <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-4">
                        Ch√∫ng t√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n üëã
                    </h1>
                    <p className="text-lg md:text-xl text-green-50 max-w-2xl mx-auto mb-8">
                        T√¨m c√¢u tr·∫£ l·ªùi nhanh ch√≥ng ho·∫∑c li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ nhi·ªát t√¨nh c·ªßa ch√∫ng t√¥i
                    </p>

                    {/* Search Bar */}
                    <div className="max-w-2xl mx-auto">
                        <div className="relative">
                            <input
                                type="text"
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                placeholder="T√¨m ki·∫øm c√¢u h·ªèi... (VD: ƒë·∫∑t h√†ng, giao h√†ng, thanh to√°n)"
                                className="w-full px-6 py-4 pr-12 rounded-2xl text-gray-800 placeholder-gray-400 focus:outline-none focus:ring-4 focus:ring-green-300 shadow-2xl text-lg"
                            />
                            <div className="absolute right-4 top-1/2 -translate-y-1/2 text-2xl">
                                üîç
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div className="max-w-7xl mx-auto px-4 py-12">
                {/* Quick Actions */}
                <div className="mb-12">
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center">
                        H√†nh ƒë·ªông nhanh ‚ö°
                    </h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {quickActions.map((action, index) => (
                            <button
                                key={index}
                                onClick={() => navigate(action.link)}
                                className="p-6 bg-white rounded-2xl border-2 border-gray-200 hover:border-green-500 hover:shadow-lg transition-all duration-300 text-center group"
                            >
                                <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">
                                    {action.emoji}
                                </div>
                                <p className="font-semibold text-gray-800 group-hover:text-green-600">
                                    {action.title}
                                </p>
                            </button>
                        ))}
                    </div>
                </div>

                {/* Contact Methods */}
                <div className="mb-16">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2 text-center">
                        Li√™n h·ªá v·ªõi ch√∫ng t√¥i
                    </h2>
                    <p className="text-gray-600 text-center mb-8">
                        Ch·ªçn ph∆∞∆°ng th·ª©c li√™n l·∫°c ph√π h·ª£p v·ªõi b·∫°n
                    </p>
                    <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
                        {contactMethods.map((method, index) => (
                            <div
                                key={index}
                                className={`${method.bgColor} p-6 rounded-2xl border-2 border-gray-100 hover:border-green-400 transition-all duration-300 hover:scale-105 cursor-pointer`}
                            >
                                <div className="text-4xl mb-3">{method.emoji}</div>
                                <h3 className={`font-bold text-lg mb-2 ${method.textColor}`}>
                                    {method.title}
                                </h3>
                                <p className="text-gray-800 font-semibold mb-1">
                                    {method.content}
                                </p>
                                <p className="text-sm text-gray-600">
                                    {method.description}
                                </p>
                            </div>
                        ))}
                    </div>
                </div>

                {/* FAQ Section */}
                <div className="mb-16">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-900 mb-2">
                            C√¢u h·ªèi th∆∞·ªùng g·∫∑p üí°
                        </h2>
                        <p className="text-gray-600">
                            T√¨m c√¢u tr·∫£ l·ªùi cho c√°c th·∫Øc m·∫Øc ph·ªï bi·∫øn
                        </p>
                    </div>

                    {/* Category Filter */}
                    <div className="flex flex-wrap justify-center gap-3 mb-8">
                        {faqCategories.map((cat) => (
                            <button
                                key={cat.id}
                                onClick={() => setSelectedCategory(cat.id)}
                                className={`px-6 py-3 rounded-full font-medium transition-all duration-300 ${
                                    selectedCategory === cat.id
                                        ? 'bg-gradient-to-r from-green-600 to-emerald-600 text-white shadow-lg scale-105'
                                        : 'bg-white text-gray-700 border-2 border-gray-200 hover:border-green-500'
                                }`}
                            >
                                <span className="mr-2">{cat.emoji}</span>
                                {cat.name}
                            </button>
                        ))}
                    </div>

                    {/* FAQ List */}
                    <div className="max-w-4xl mx-auto space-y-4">
                        {filteredFaqs.length > 0 ? (
                            filteredFaqs.map((faq) => (
                                <div
                                    key={faq.id}
                                    className="bg-white rounded-2xl border-2 border-gray-200 overflow-hidden hover:border-green-400 transition-all duration-300"
                                >
                                    <button
                                        onClick={() => setOpenFaqId(openFaqId === faq.id ? null : faq.id)}
                                        className="w-full px-6 py-5 text-left flex items-center justify-between hover:bg-gray-50 transition-colors"
                                    >
                                        <span className="font-semibold text-gray-900 pr-4">
                                            {faq.question}
                                        </span>
                                        <span className="text-2xl flex-shrink-0">
                                            {openFaqId === faq.id ? '‚àí' : '+'}
                                        </span>
                                    </button>
                                    {openFaqId === faq.id && (
                                        <div className="px-6 pb-5 text-gray-600 leading-relaxed border-t border-gray-100 pt-4 animate-fadeIn">
                                            {faq.answer}
                                        </div>
                                    )}
                                </div>
                            ))
                        ) : (
                            <div className="text-center py-12 bg-white rounded-2xl border-2 border-dashed border-gray-300">
                                <div className="text-6xl mb-4">ü§î</div>
                                <p className="text-gray-600 text-lg">
                                    Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ph√π h·ª£p
                                </p>
                                <button
                                    onClick={() => {
                                        setSearchQuery('')
                                        setSelectedCategory('all')
                                    }}
                                    className="mt-4 text-green-600 font-medium hover:underline"
                                >
                                    X√≥a b·ªô l·ªçc
                                </button>
                            </div>
                        )}
                    </div>
                </div>

                {/* Contact Form Section */}
                <div className="max-w-3xl mx-auto">
                    <div className="bg-white rounded-3xl shadow-xl border-2 border-gray-100 overflow-hidden">
                        <div className="bg-gradient-to-r from-green-600 to-emerald-600 text-white p-8 text-center">
                            <h2 className="text-3xl font-bold mb-2">
                                V·∫´n c·∫ßn h·ªó tr·ª£? ü§ù
                            </h2>
                            <p className="text-green-50">
                                G·ª≠i tin nh·∫Øn cho ch√∫ng t√¥i v√† nh·∫≠n ph·∫£n h·ªìi trong v√≤ng 2 gi·ªù
                            </p>
                        </div>

                        <form onSubmit={handleSubmitContact} className="p-8 space-y-6">
                            <div className="grid md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                                        H·ªç v√† t√™n <span className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        value={contactForm.name}
                                        onChange={(e) => setContactForm({...contactForm, name: e.target.value})}
                                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                                        required
                                        placeholder="Nguy·ªÖn VƒÉn A"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                                        Email <span className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="email"
                                        value={contactForm.email}
                                        onChange={(e) => setContactForm({...contactForm, email: e.target.value})}
                                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                                        required
                                        placeholder="email@example.com"
                                    />
                                </div>
                            </div>

                            <div className="grid md:grid-cols-2 gap-6">
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                                        S·ªë ƒëi·ªán tho·∫°i
                                    </label>
                                    <input
                                        type="tel"
                                        value={contactForm.phone}
                                        onChange={(e) => setContactForm({...contactForm, phone: e.target.value})}
                                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                                        placeholder="0123456789"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                                        Ch·ªß ƒë·ªÅ <span className="text-red-500">*</span>
                                    </label>
                                    <select
                                        value={contactForm.subject}
                                        onChange={(e) => setContactForm({...contactForm, subject: e.target.value})}
                                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                                        required
                                    >
                                        <option value="">Ch·ªçn ch·ªß ƒë·ªÅ</option>
                                        <option value="order">V·∫•n ƒë·ªÅ ƒë∆°n h√†ng</option>
                                        <option value="product">S·∫£n ph·∫©m</option>
                                        <option value="payment">Thanh to√°n</option>
                                        <option value="shipping">V·∫≠n chuy·ªÉn</option>
                                        <option value="other">Kh√°c</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">
                                    N·ªôi dung tin nh·∫Øn <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    value={contactForm.message}
                                    onChange={(e) => setContactForm({...contactForm, message: e.target.value})}
                                    rows="6"
                                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors resize-none"
                                    required
                                    placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ c·ªßa b·∫°n..."
                                ></textarea>
                            </div>

                            <button
                                type="submit"
                                className="w-full py-4 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-bold rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-300 shadow-lg hover:shadow-xl text-lg"
                            >
                                G·ª≠i tin nh·∫Øn üìÆ
                            </button>
                        </form>
                    </div>
                </div>

                {/* Bottom CTA */}
                <div className="mt-16 text-center bg-gradient-to-r from-green-600 to-emerald-600 rounded-3xl p-12 text-white">
                    <div className="text-6xl mb-4">üåü</div>
                    <h2 className="text-3xl font-bold mb-4">
                        H√†i l√≤ng v·ªõi d·ªãch v·ª• c·ªßa ch√∫ng t√¥i?
                    </h2>
                    <p className="text-green-50 text-lg mb-6 max-w-2xl mx-auto">
                        Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p ch√∫ng t√¥i ph·ª•c v·ª• b·∫°n t·ªët h∆°n!
                    </p>
                    <button
                        onClick={() => navigate('/feedback')}
                        className="px-8 py-4 bg-white text-green-600 font-bold rounded-xl hover:bg-gray-50 transition-all duration-300 shadow-lg hover:shadow-xl"
                    >
                        G·ª≠i ƒë√°nh gi√°
                    </button>
                </div>
            </div>
        </div>
    )
}

export default Support
